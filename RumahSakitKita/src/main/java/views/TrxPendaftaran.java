/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import config.Database;
import java.awt.Color;
import java.text.SimpleDateFormat;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
/**
 *
 * @author darwisy
 */
public class TrxPendaftaran extends javax.swing.JFrame {
    private Connection conn =new Database().connect();
    private DefaultTableModel model;
    /**
     * Creates new form DataObat
     */
    public TrxPendaftaran() {
        initComponents();
        // Initialize status combo box
        status.setModel(new javax.swing.DefaultComboBoxModel<>(
        new String[] {"Menunggu", "Diperiksa", "Rawat Inap", "Pulang"}));
        
        
         loadPasienDataToComboBox(pasien);
            loadPetugasDataToComboBox(petugas);
         initTable();
            loadData();
         clearForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPendaftaran = new javax.swing.JTable();
        btnBatal = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        noReg = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnKembali = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        keluhan = new javax.swing.JTextArea();
        status = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        petugas = new javax.swing.JComboBox<>();
        pasien = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        diagnosaAwal = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 189, 89));

        tblPendaftaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPendaftaran.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPendaftaranMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPendaftaran);

        btnBatal.setBackground(new java.awt.Color(51, 51, 51));
        btnBatal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.setText("Batal");
        btnBatal.setBorder(null);
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("NO REGISTRASI");

        noReg.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        noReg.setBorder(null);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("PENDAFTARAN");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("PASIEN");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("PETUGAS");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("KELUHAN");

        btnKembali.setBackground(new java.awt.Color(48, 222, 135));
        btnKembali.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnKembali.setText("Kembali");
        btnKembali.setBorder(null);
        btnKembali.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnKembaliMouseClicked(evt);
            }
        });

        btnSimpan.setBackground(new java.awt.Color(48, 222, 135));
        btnSimpan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSimpan.setText("Simpan");
        btnSimpan.setBorder(null);
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(255, 255, 51));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setBorder(null);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(255, 0, 51));
        btnHapus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHapus.setText("Hapus");
        btnHapus.setBorder(null);
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.setText(" Search...");
        txtSearch.setBorder(null);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        keluhan.setColumns(20);
        keluhan.setRows(5);
        jScrollPane2.setViewportView(keluhan);

        status.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("STATUS");

        petugas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        petugas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        pasien.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        pasien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("DIAGNOSA AWAL");

        diagnosaAwal.setColumns(20);
        diagnosaAwal.setRows(5);
        jScrollPane3.setViewportView(diagnosaAwal);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 46, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(35, 35, 35))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(87, 87, 87)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(petugas, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(noReg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                                .addComponent(pasien, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jLabel4))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(388, 388, 388)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jLabel10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(txtSearch))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(37, 37, 37))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(364, 364, 364)
                .addComponent(jLabel2)
                .addContainerGap(456, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(93, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(noReg, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(79, 79, 79)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(petugas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(pasien, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(109, 109, 109))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        simpanData();
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        clearForm();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editData();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        hapusData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void tblPendaftaranMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPendaftaranMouseClicked
        int row = tblPendaftaran.getSelectedRow();
    
    if (row >= 0) {
        // Get the selected values from table
        String noRegistrasi = tblPendaftaran.getValueAt(row, 0).toString();
        String namaPasien = tblPendaftaran.getValueAt(row, 1).toString();
        String namaPetugas = tblPendaftaran.getValueAt(row, 3).toString();
        String keluhanText = tblPendaftaran.getValueAt(row, 4).toString();
        String diagnosaText = tblPendaftaran.getValueAt(row, 5).toString();
        String statusText = tblPendaftaran.getValueAt(row, 6).toString();

        // Fill the form fields
        noReg.setText(noRegistrasi);
        keluhan.setText(keluhanText);
        diagnosaAwal.setText(diagnosaText);
        status.setSelectedItem(statusText);

        // Find and select matching items in combo boxes
        selectComboBoxItemByPartialText(pasien, namaPasien);
        selectComboBoxItemByPartialText(petugas, namaPetugas);

        // Make no_registrasi non-editable when editing
        noReg.setEditable(false);
        noReg.setBackground(Color.LIGHT_GRAY);
    }
    }//GEN-LAST:event_tblPendaftaranMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        searchData();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnKembaliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnKembaliMouseClicked
        this.dispose();
    
    
        new Menu().setVisible(true);
    }//GEN-LAST:event_btnKembaliMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrxPendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrxPendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrxPendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrxPendaftaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrxPendaftaran().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JTextArea diagnosaAwal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea keluhan;
    private javax.swing.JTextField noReg;
    private javax.swing.JComboBox<String> pasien;
    private javax.swing.JComboBox<String> petugas;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JTable tblPendaftaran;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
    model = new DefaultTableModel();
    model.addColumn("No Registrasi");
    model.addColumn("Nama Pasien");
    model.addColumn("Tanggal Registrasi");
    model.addColumn("Nama Petugas");
    model.addColumn("Keluhan");
    model.addColumn("Diagnosa Awal");
    model.addColumn("Status");
    tblPendaftaran.setModel(model);
}

    private void loadData() {
    model.setRowCount(0);
    String sql = "SELECT p.no_registrasi, ps.nama_pasien, p.tgl_registrasi, "
               + "pm.nama_petugas, p.keluhan, p.diagnosa_awal, p.status "
               + "FROM pendaftaran p "
               + "JOIN pasien ps ON p.kd_pasien = ps.kd_pasien "
               + "JOIN petugas_medis pm ON p.kd_petugas = pm.kd_petugas";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("no_registrasi"),
                rs.getString("nama_pasien"),
                dateFormat.format(rs.getTimestamp("tgl_registrasi")),
                rs.getString("nama_petugas"),
                rs.getString("keluhan"),
                rs.getString("diagnosa_awal"),
                rs.getString("status")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
    
    private void simpanData() {
    String sql = "INSERT INTO pendaftaran (no_registrasi, kd_pasien, kd_petugas, "
               + "keluhan, diagnosa_awal, status) VALUES (?, ?, ?, ?, ?, ?)";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        // Extract codes from combo box items
        String kodePasien = pasien.getSelectedItem().toString().split(" - ")[0];
        String kodePetugas = petugas.getSelectedItem().toString().split(" - ")[0];
        
        stmt.setString(1, noReg.getText());
        stmt.setString(2, kodePasien);
        stmt.setString(3, kodePetugas);
        stmt.setString(4, keluhan.getText());
        stmt.setString(5, diagnosaAwal.getText());
        stmt.setString(6, status.getSelectedItem().toString());
        
        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Data registrasi pasien berhasil disimpan");
        loadData();
        clearForm();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}

    private void editData() {
    if (noReg.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "No Registrasi harus diisi", 
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String sql = "UPDATE pendaftaran SET kd_pasien=?, kd_petugas=?, "
               + "keluhan=?, diagnosa_awal=?, status=? WHERE no_registrasi=?";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        // Extract codes from combo box items
        String kodePasien = pasien.getSelectedItem().toString().split(" - ")[0];
        String kodePetugas = petugas.getSelectedItem().toString().split(" - ")[0];
        
        stmt.setString(1, kodePasien);
        stmt.setString(2, kodePetugas);
        stmt.setString(3, keluhan.getText());
        stmt.setString(4, diagnosaAwal.getText());
        stmt.setString(5, status.getSelectedItem().toString());
        stmt.setString(6, noReg.getText());
        
        int updatedRows = stmt.executeUpdate();
        if (updatedRows > 0) {
            JOptionPane.showMessageDialog(this, "Data registrasi berhasil diupdate");
            loadData();
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Data tidak ditemukan", 
                "Error", JOptionPane.WARNING_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
   
    private void hapusData() {
        int selectedRow = tblPendaftaran.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus");
            return;
        }

        // Show confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Apakah Anda yakin ingin menghapus data registrasi ini?",
            "Konfirmasi Hapus",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        // If user clicks No, cancel the deletion
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
    
    String noRegistrasi = tblPendaftaran.getValueAt(selectedRow, 0).toString();
    String sql = "DELETE FROM pendaftaran WHERE no_registrasi=?";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, noRegistrasi);
        int rowsDeleted = stmt.executeUpdate();
        
        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Data registrasi berhasil dihapus");
            loadData();
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Data registrasi tidak ditemukan");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void clearForm() {
    noReg.setText(generateNoRegistrasi());
    petugas.setSelectedIndex(0);
    pasien.setSelectedIndex(0);
    keluhan.setText("");
    diagnosaAwal.setText("");
    status.setSelectedIndex(0);
    
    noReg.setEditable(true);
    noReg.setBackground(Color.WHITE);
    tblPendaftaran.clearSelection();
}
    
    private void searchData() {
    String keyword = txtSearch.getText().trim();
    model.setRowCount(0);
    
    String sql = "SELECT p.no_registrasi, ps.nama_pasien, p.tgl_registrasi, "
               + "pm.nama_petugas, p.keluhan, p.diagnosa_awal, p.status "
               + "FROM pendaftaran p "
               + "JOIN pasien ps ON p.kd_pasien = ps.kd_pasien "
               + "JOIN petugas_medis pm ON p.kd_petugas = pm.kd_petugas "
               + "WHERE p.no_registrasi LIKE ? OR "
               + "ps.nama_pasien LIKE ? OR "
               + "pm.nama_petugas LIKE ? OR "
               + "p.keluhan LIKE ? OR "
               + "p.diagnosa_awal LIKE ? OR "
               + "p.status LIKE ?";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        String searchPattern = "%" + keyword + "%";
        for (int i = 1; i <= 6; i++) {
            stmt.setString(i, searchPattern);
        }
        
        ResultSet rs = stmt.executeQuery();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("no_registrasi"),
                rs.getString("nama_pasien"),
                dateFormat.format(rs.getTimestamp("tgl_registrasi")),
                rs.getString("nama_petugas"),
                rs.getString("keluhan"),
                rs.getString("diagnosa_awal"),
                rs.getString("status")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error saat mencari data: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}
    
    private String generateNoRegistrasi() {
    String prefix = "RGS";
    String sql = "SELECT MAX(no_registrasi) AS last_code FROM pendaftaran WHERE no_registrasi LIKE ?";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, prefix + "%");
        ResultSet rs = stmt.executeQuery();
        
        if (rs.next()) {
            String lastCode = rs.getString("last_code");
            if (lastCode != null) {
                int lastNumber = Integer.parseInt(lastCode.substring(prefix.length()));
                return prefix + String.format("%03d", lastNumber + 1);
            }
        }
    } catch (SQLException | NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error generating code: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
    return prefix + "001";
}
    
    private void loadPasienDataToComboBox(JComboBox<String> comboBox) {
    comboBox.removeAllItems();
    String sql = "SELECT kd_pasien, nama_pasien FROM pasien";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            comboBox.addItem(rs.getString("kd_pasien") + " - " + rs.getString("nama_pasien"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading patient data: " + ex.getMessage());
    }
}

    private void loadPetugasDataToComboBox(JComboBox<String> comboBox) {
    comboBox.removeAllItems();
    String sql = "SELECT kd_petugas, nama_petugas FROM petugas_medis WHERE profesi='Dokter'";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            comboBox.addItem(rs.getString("kd_petugas") + " - " + rs.getString("nama_petugas"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading staff data: " + ex.getMessage());
    }
}

    private void selectComboBoxItemByPartialText(JComboBox<String> comboBox, String searchText) {
    for (int i = 0; i < comboBox.getItemCount(); i++) {
        String item = comboBox.getItemAt(i);
        // Check if the item contains the search text (case insensitive)
        if (item.toLowerCase().contains(searchText.toLowerCase())) {
            comboBox.setSelectedIndex(i);
            return;
        }
    }
    // If not found, try to match just the name part (after " - ")
    for (int i = 0; i < comboBox.getItemCount(); i++) {
        String item = comboBox.getItemAt(i);
        String[] parts = item.split(" - ");
        if (parts.length > 1 && parts[1].equalsIgnoreCase(searchText)) {
            comboBox.setSelectedIndex(i);
            return;
        }
    }
    JOptionPane.showMessageDialog(this, "Item not found in combo box: " + searchText);
}


    
}
