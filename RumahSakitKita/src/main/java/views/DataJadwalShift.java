/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import config.Database;
import java.awt.Color;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JOptionPane;
/**
 *
 * @author darwisy
 */
public class DataJadwalShift extends javax.swing.JFrame {
    private Connection conn =new Database().connect();
    private DefaultTableModel model;
    private Map<String, String> petugasMap = new HashMap<>(); // To map kd_petugas to nama_petugas
    /**
     * Creates new form DataObat
     */
    public DataJadwalShift() {
        initComponents();
        
       shiftPetugas.setModel(new javax.swing.DefaultComboBoxModel<>(
            new String[] {"Pagi", "Siang", "Malam", "Lembur"}));
    
        
    
        initTable();
        loadPetugasData();
        loadData();
        clearForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPetugas = new javax.swing.JTable();
        btnBatal = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        kdShift = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnKembali = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        namaPetugas = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        alamatPetugas = new javax.swing.JTextArea();
        shiftPetugas = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        jamMasuk = new com.github.lgooddatepicker.components.TimePicker();
        jLabel10 = new javax.swing.JLabel();
        timePicker2 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(56, 182, 255));

        tblPetugas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPetugas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPetugasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPetugas);

        btnBatal.setText("Batal");
        btnBatal.setBackground(new java.awt.Color(51, 51, 51));
        btnBatal.setBorder(null);
        btnBatal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        jLabel1.setText("KODE SHIFT");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        kdShift.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kdShift.setBorder(null);
        kdShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kdShiftActionPerformed(evt);
            }
        });

        jLabel2.setText("DATA JADWAL SHIFT");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jLabel4.setText("NAMA PETUGAS");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel9.setText("TANGGAL");
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btnKembali.setText("Kembali");
        btnKembali.setBackground(new java.awt.Color(48, 222, 135));
        btnKembali.setBorder(null);
        btnKembali.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnKembali.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnKembaliMouseClicked(evt);
            }
        });

        btnSimpan.setText("Simpan");
        btnSimpan.setBackground(new java.awt.Color(48, 222, 135));
        btnSimpan.setBorder(null);
        btnSimpan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.setBackground(new java.awt.Color(255, 204, 0));
        btnEdit.setBorder(null);
        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.setBackground(new java.awt.Color(255, 0, 51));
        btnHapus.setBorder(null);
        btnHapus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.setText("Search...");
        txtSearch.setBorder(null);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        namaPetugas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        namaPetugas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        alamatPetugas.setColumns(20);
        alamatPetugas.setRows(5);
        jScrollPane2.setViewportView(alamatPetugas);

        shiftPetugas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        shiftPetugas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel5.setText("SHIFT");
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel8.setText("JAM MASUK");
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("JAM KELUAR");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("KETERANGAN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 46, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(49, 49, 49)
                                .addComponent(kdShift, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(namaPetugas, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(shiftPetugas, 0, 281, Short.MAX_VALUE)
                                    .addComponent(datePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 75, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(331, 331, 331)
                        .addComponent(jLabel2)))
                .addGap(18, 62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jamMasuk, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jamMasuk, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(kdShift, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(namaPetugas, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(timePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(shiftPetugas, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        simpanData();
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        clearForm();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editData();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        hapusData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void tblPetugasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPetugasMouseClicked
        int row = tblPetugas.getSelectedRow();
        
        if (row >= 0) {
            // Fill the form fields
            kdShift.setText(tblPetugas.getValueAt(row, 0).toString());
            
            // Set petugas combobox
            String kdPetugas = tblPetugas.getValueAt(row, 1).toString();
            for (int i = 0; i < namaPetugas.getItemCount(); i++) {
                if (namaPetugas.getItemAt(i).contains(kdPetugas)) {
                    namaPetugas.setSelectedIndex(i);
                    break;
                }
            }
            
            // Set shift
            shiftPetugas.setSelectedItem(tblPetugas.getValueAt(row, 2).toString());
            
            // Set date
            Object dateValue = tblPetugas.getValueAt(row, 3);
            if (dateValue instanceof java.sql.Date) {
                datePicker1.setDate(((java.sql.Date) dateValue).toLocalDate());
            }
            
            // Set time
            Object masukTime = tblPetugas.getValueAt(row, 4);
            if (masukTime instanceof java.sql.Time) {
                jamMasuk.setTime(((java.sql.Time) masukTime).toLocalTime());
            }
            
            Object keluarTime = tblPetugas.getValueAt(row, 5);
            if (keluarTime instanceof java.sql.Time) {
                timePicker2.setTime(((java.sql.Time) keluarTime).toLocalTime());
            }
            
            // Set keterangan
            alamatPetugas.setText(tblPetugas.getValueAt(row, 6).toString());
            
            // Make kdShift non-editable when editing
            kdShift.setEditable(false);
            kdShift.setBackground(Color.LIGHT_GRAY);
        }
    
    }//GEN-LAST:event_tblPetugasMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        searchData();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnKembaliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnKembaliMouseClicked
        this.dispose();
 
    new Menu().setVisible(true);
    }//GEN-LAST:event_btnKembaliMouseClicked

    private void kdShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kdShiftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kdShiftActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataJadwalShift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataJadwalShift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataJadwalShift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataJadwalShift.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataJadwalShift().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea alamatPetugas;
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.github.lgooddatepicker.components.TimePicker jamMasuk;
    private javax.swing.JTextField kdShift;
    private javax.swing.JComboBox<String> namaPetugas;
    private javax.swing.JComboBox<String> shiftPetugas;
    private javax.swing.JTable tblPetugas;
    private com.github.lgooddatepicker.components.TimePicker timePicker2;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
        model = new DefaultTableModel();
        model.addColumn("Kode Shift");
        model.addColumn("Nama Petugas");
        model.addColumn("Shift");
        model.addColumn("Tanggal");
        model.addColumn("Jam Masuk");
        model.addColumn("Jam Keluar");
        model.addColumn("Keterangan");
        tblPetugas.setModel(model);
    }
    
    
    private void loadData() {
    model.setRowCount(0);
    // Modified SQL to join with petugas_medis table
    String sql = "SELECT js.*, pm.nama_petugas FROM jadwal_shift js " +
                 "LEFT JOIN petugas_medis pm ON js.kd_petugas = pm.kd_petugas";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("kd_shift"),
                rs.getString("nama_petugas"), // Show name instead of code
                rs.getString("shift"),
                rs.getDate("tanggal"),
                rs.getTime("jam_masuk"),
                rs.getTime("jam_keluar"),
                rs.getString("keterangan")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
    
    private void simpanData() {
        String sql = "INSERT INTO jadwal_shift (kd_shift, kd_petugas, shift, tanggal, jam_masuk, jam_keluar, keterangan) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?)";
        
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            // Get kd_petugas from selected combobox item
            String selectedPetugas = (String) namaPetugas.getSelectedItem();
            String kdPetugas = selectedPetugas.substring(selectedPetugas.indexOf("(") + 1, selectedPetugas.indexOf(")"));
            
            stmt.setString(1, kdShift.getText());
            stmt.setString(2, kdPetugas);
            stmt.setString(3, (String) shiftPetugas.getSelectedItem());
            
            // Handle date
            LocalDate selectedDate = datePicker1.getDate();
            if (selectedDate != null) {
                stmt.setDate(4, java.sql.Date.valueOf(selectedDate));
            } else {
                JOptionPane.showMessageDialog(this, "Tanggal harus diisi");
                return;
            }
            
            // Handle time
            LocalTime masukTime = jamMasuk.getTime();
            LocalTime keluarTime = timePicker2.getTime();
            if (masukTime == null || keluarTime == null) {
                JOptionPane.showMessageDialog(this, "Jam masuk dan jam keluar harus diisi");
                return;
            }
            stmt.setTime(5, java.sql.Time.valueOf(masukTime));
            stmt.setTime(6, java.sql.Time.valueOf(keluarTime));
            
            stmt.setString(7, alamatPetugas.getText());
            
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan");
            loadData();
            clearForm();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }
    
    private void editData() {
        if (kdShift.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Kode Shift harus diisi", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String sql = "UPDATE jadwal_shift SET kd_petugas=?, shift=?, tanggal=?, "
                   + "jam_masuk=?, jam_keluar=?, keterangan=? WHERE kd_shift=?";
        
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            // Get kd_petugas from selected combobox item
            String selectedPetugas = (String) namaPetugas.getSelectedItem();
            String kdPetugas = selectedPetugas.substring(selectedPetugas.indexOf("(") + 1, selectedPetugas.indexOf(")"));
            
            stmt.setString(1, kdPetugas);
            stmt.setString(2, (String) shiftPetugas.getSelectedItem());
            
            // Handle date
            LocalDate selectedDate = datePicker1.getDate();
            if (selectedDate != null) {
                stmt.setDate(3, java.sql.Date.valueOf(selectedDate));
            } else {
                JOptionPane.showMessageDialog(this, "Tanggal harus diisi");
                return;
            }
            
            // Handle time
            LocalTime masukTime = jamMasuk.getTime();
            LocalTime keluarTime = timePicker2.getTime();
            if (masukTime == null || keluarTime == null) {
                JOptionPane.showMessageDialog(this, "Jam masuk dan jam keluar harus diisi");
                return;
            }
            stmt.setTime(4, java.sql.Time.valueOf(masukTime));
            stmt.setTime(5, java.sql.Time.valueOf(keluarTime));
            
            stmt.setString(6, alamatPetugas.getText());
            stmt.setString(7, kdShift.getText());
            
            int updatedRows = stmt.executeUpdate();
            if (updatedRows > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diupdate");
                loadData();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan", 
                    "Error", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    } 
    
   private void hapusData() {
    int selectedRow = tblPetugas.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus");
        return;
    }
    
    // Simple confirmation dialog
    int confirm = JOptionPane.showConfirmDialog(
        this, 
        "Apakah Anda yakin ingin menghapus data ini?", 
        "Konfirmasi Hapus",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE
    );
    
    // Only proceed if user clicked Yes
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }
    
    String kodeShift = tblPetugas.getValueAt(selectedRow, 0).toString();
    String sql = "DELETE FROM jadwal_shift WHERE kd_shift=?";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, kodeShift);
        int affectedRows = stmt.executeUpdate();
        
        if (affectedRows > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus");
            loadData();
            clearForm();
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void clearForm() {
        kdShift.setText(generateKodeShift());
        namaPetugas.setSelectedIndex(0);
        shiftPetugas.setSelectedIndex(0);
        datePicker1.setDate(null);
        jamMasuk.setTime(null);
        timePicker2.setTime(null);
        alamatPetugas.setText("");
        
        kdShift.setEditable(true);
        kdShift.setBackground(Color.WHITE);
        tblPetugas.clearSelection();
    }
    
    private void searchData() {
    String keyword = txtSearch.getText().trim();
    model.setRowCount(0);
    
    String sql = "SELECT js.*, pm.nama_petugas FROM jadwal_shift js "
               + "JOIN petugas_medis pm ON js.kd_petugas = pm.kd_petugas "
               + "WHERE js.kd_shift LIKE ? OR "
               + "js.kd_petugas LIKE ? OR "
               + "pm.nama_petugas LIKE ? OR "  // Tambahkan pencarian berdasarkan nama
               + "js.shift LIKE ? OR "
               + "js.keterangan LIKE ?";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        String searchPattern = "%" + keyword + "%";
        stmt.setString(1, searchPattern);
        stmt.setString(2, searchPattern);
        stmt.setString(3, searchPattern);  // Parameter untuk nama petugas
        stmt.setString(4, searchPattern);
        stmt.setString(5, searchPattern);
        
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("kd_shift"),
                rs.getString("nama_petugas"), // Show name instead of code
                rs.getString("shift"),
                rs.getDate("tanggal"),
                rs.getTime("jam_masuk"),
                rs.getTime("jam_keluar"),
                rs.getString("keterangan")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error saat mencari data: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}
    
    private String generateKodeShift() {
        String prefix = "SFT";
        String sql = "SELECT MAX(kd_shift) AS last_code FROM jadwal_shift WHERE kd_shift LIKE ?";
        
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, prefix + "%");
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                String lastCode = rs.getString("last_code");
                if (lastCode != null) {
                    int lastNumber = Integer.parseInt(lastCode.substring(prefix.length()));
                    return prefix + String.format("%04d", lastNumber + 1);
                }
            }
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error generating code: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
        return prefix + "0001";
    }

    private void loadPetugasData() {
        namaPetugas.removeAllItems();
        petugasMap.clear();
        
        String sql = "SELECT kd_petugas, nama_petugas FROM petugas_medis";
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            
            while (rs.next()) {
                String kode = rs.getString("kd_petugas");
                String nama = rs.getString("nama_petugas");
                petugasMap.put(kode, nama);
                namaPetugas.addItem(nama + " (" + kode + ")");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading petugas data: " + ex.getMessage());
        }
    }
}
