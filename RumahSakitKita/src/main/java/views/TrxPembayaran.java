/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import config.Database;
import java.awt.Color;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.Locale;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
/**
 *
 * @author darwisy
 */
public class TrxPembayaran extends javax.swing.JFrame {
    private Connection conn =new Database().connect();
    private DefaultTableModel model;
    /**
     * Creates new form DataObat
     */
    public TrxPembayaran() {
        initComponents();

         loadPasienDataToComboBox(noRegistrasiP);
            statusPembayaran.setModel(new javax.swing.DefaultComboBoxModel<>(
            new String[] {"Lunas", "Belum Lunas", "Sebagian"}));
            
            jenisPembayaran.setModel(new javax.swing.DefaultComboBoxModel<>(
            new String[] {"Tunai", "Kartu Kredit", "Debit", "Asuransi"}));
            
         initTable();
         loadData();
         clearForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPembayaran = new javax.swing.JTable();
        btnBatal = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        kdPembayaran = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnKembali = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        noRegistrasiP = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        tanggalPembayaran = new com.github.lgooddatepicker.components.DatePicker();
        jenisPembayaran = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        biayaObat = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        biayaPerawatan = new javax.swing.JTextField();
        statusPembayaran = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        keterangan = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 189, 89));

        tblPembayaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPembayaran.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPembayaranMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPembayaran);

        btnBatal.setText("Batal");
        btnBatal.setBackground(new java.awt.Color(51, 51, 51));
        btnBatal.setBorder(null);
        btnBatal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        jLabel1.setText("KODE PEMBAYARAN");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        kdPembayaran.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kdPembayaran.setBorder(null);

        jLabel2.setText("PEMBAYARAN");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jLabel3.setText("NO REGISTRASI");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel4.setText("JENIS PEMBAYARAN");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btnKembali.setText("Kembali");
        btnKembali.setBackground(new java.awt.Color(48, 222, 135));
        btnKembali.setBorder(null);
        btnKembali.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnKembali.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnKembaliMouseClicked(evt);
            }
        });

        btnSimpan.setText("Simpan");
        btnSimpan.setBackground(new java.awt.Color(48, 222, 135));
        btnSimpan.setBorder(null);
        btnSimpan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.setBackground(new java.awt.Color(255, 255, 51));
        btnEdit.setBorder(null);
        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.setBackground(new java.awt.Color(255, 0, 51));
        btnHapus.setBorder(null);
        btnHapus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.setText(" Search...");
        txtSearch.setBorder(null);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        noRegistrasiP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        noRegistrasiP.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        noRegistrasiP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noRegistrasiPActionPerformed(evt);
            }
        });

        jLabel5.setText("TANGGAL");
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jenisPembayaran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("BIAYA OBAT");

        biayaObat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        biayaObat.setBorder(null);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("BIAYA PERAWATAN");

        biayaPerawatan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        biayaPerawatan.setBorder(null);
        biayaPerawatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biayaPerawatanActionPerformed(evt);
            }
        });

        statusPembayaran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("STATUS");

        keterangan.setColumns(20);
        keterangan.setRows(5);
        jScrollPane2.setViewportView(keterangan);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("KETERANGAN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(364, 364, 364)
                .addComponent(jLabel2)
                .addContainerGap(464, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(kdPembayaran, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                                .addComponent(noRegistrasiP, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tanggalPembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jenisPembayaran, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSearch))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(biayaObat, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane2)
                                            .addComponent(biayaPerawatan, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                                            .addComponent(statusPembayaran, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
                .addGap(37, 37, 37))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(117, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(kdPembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(biayaObat, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(79, 79, 79)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(noRegistrasiP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addComponent(biayaPerawatan, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(statusPembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tanggalPembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jenisPembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel9)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        searchData();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        hapusData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editData();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        simpanData();
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnKembaliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnKembaliMouseClicked
        this.dispose();
        new Menu().setVisible(true);
    }//GEN-LAST:event_btnKembaliMouseClicked

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        clearForm();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void tblPembayaranMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPembayaranMouseClicked
        int row = tblPembayaran.getSelectedRow();

        if (row >= 0) {
            try {
                // Get the selected values from table
                String kodePembayaran = tblPembayaran.getValueAt(row, 0).toString();
                String namaPasien = tblPembayaran.getValueAt(row, 1).toString();
                String tglPembayaran = tblPembayaran.getValueAt(row, 2).toString();
                String jenisPembayaran = tblPembayaran.getValueAt(row, 3).toString();

                // Get biaya values - handle both String and Number types
                Object biayaObatValue = tblPembayaran.getValueAt(row, 4);
                Object biayaPerawatanValue = tblPembayaran.getValueAt(row, 5);

                String statusPembayaran = tblPembayaran.getValueAt(row, 7).toString();
                String keterangan = tblPembayaran.getValueAt(row, 8).toString();

                // Fill the form fields
                kdPembayaran.setText(kodePembayaran);

                // Set the date
                SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                java.util.Date date = format.parse(tglPembayaran);
                tanggalPembayaran.setDate(date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());

                // Set biaya values - handle different types that might come from table
                if (biayaObatValue instanceof Number) {
                    biayaObat.setText(String.valueOf(((Number)biayaObatValue).doubleValue()));
                } else {
                    biayaObat.setText(biayaObatValue.toString());
                }

                if (biayaPerawatanValue instanceof Number) {
                    biayaPerawatan.setText(String.valueOf(((Number)biayaPerawatanValue).doubleValue()));
                } else {
                    biayaPerawatan.setText(biayaPerawatanValue.toString());
                }

                this.keterangan.setText(keterangan);

                // Set combo boxes
                setComboBoxValue(this.jenisPembayaran, jenisPembayaran);
                setComboBoxValue(this.statusPembayaran, statusPembayaran);

                // Find matching registration in combo box
                for (int i = 0; i < noRegistrasiP.getItemCount(); i++) {
                    if (noRegistrasiP.getItemAt(i).contains(namaPasien)) {
                        noRegistrasiP.setSelectedIndex(i);
                        break;
                    }
                }

                // Make kd_pembayaran non-editable when editing
                kdPembayaran.setEditable(false);
                kdPembayaran.setBackground(Color.LIGHT_GRAY);

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Error parsing date: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_tblPembayaranMouseClicked

    private void biayaPerawatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biayaPerawatanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_biayaPerawatanActionPerformed

    private void noRegistrasiPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noRegistrasiPActionPerformed
        // Get selected item from combobox
        String selectedItem = (String) noRegistrasiP.getSelectedItem();

        if (selectedItem != null && !selectedItem.isEmpty()) {
            // Extract registration number (format: "REG001 - John Doe")
            String noRegistrasi = selectedItem.split(" - ")[0].trim();

            // Calculate and display medicine costs
            calculateAndDisplayBiayaObat(noRegistrasi);
        }
    }//GEN-LAST:event_noRegistrasiPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrxPembayaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrxPembayaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrxPembayaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrxPembayaran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrxPembayaran().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField biayaObat;
    private javax.swing.JTextField biayaPerawatan;
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jenisPembayaran;
    private javax.swing.JTextField kdPembayaran;
    private javax.swing.JTextArea keterangan;
    private javax.swing.JComboBox<String> noRegistrasiP;
    private javax.swing.JComboBox<String> statusPembayaran;
    private com.github.lgooddatepicker.components.DatePicker tanggalPembayaran;
    private javax.swing.JTable tblPembayaran;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
    model = new DefaultTableModel();
    model.addColumn("Kode Pembayaran");
    model.addColumn("No Registrasi");
    model.addColumn("Tanggal Pembayaran");
    model.addColumn("Jenis Pembayaran");
    model.addColumn("Biaya Obat");
    model.addColumn("Biaya Perawatan");
    model.addColumn("Total Biaya");
    model.addColumn("Status Pembayaran");
    model.addColumn("Keterangan");
    
    tblPembayaran.setModel(model);
}

private void loadData() {
    model.setRowCount(0);
    String sql = "SELECT p.kd_pembayaran, p.no_registrasi, p.tgl_pembayaran, "
               + "p.jenis_pembayaran, p.biaya_obat, p.biaya_perawatan, "
               + "p.total_biaya, p.status_pembayaran, p.keterangan, "
               + "ps.nama_pasien "
               + "FROM pembayaran p "
               + "JOIN pendaftaran pd ON p.no_registrasi = pd.no_registrasi "
               + "JOIN pasien ps ON pd.kd_pasien = ps.kd_pasien";

    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("kd_pembayaran"),
                rs.getString("nama_pasien"),
                dateFormat.format(rs.getDate("tgl_pembayaran")),
                rs.getString("jenis_pembayaran"),
                rs.getBigDecimal("biaya_obat"),
                rs.getBigDecimal("biaya_perawatan"),
                rs.getBigDecimal("total_biaya"),
                rs.getString("status_pembayaran"),
                rs.getString("keterangan")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading payment data: " + ex.getMessage());
        ex.printStackTrace();
    }
}
private void simpanData() {
    // Validate required fields
    if (kdPembayaran.getText().trim().isEmpty() || 
        noRegistrasiP.getSelectedItem() == null || 
        
        tanggalPembayaran.getDate() == null ||
        biayaObat.getText().trim().isEmpty() ||
        biayaPerawatan.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Harap isi semua field yang diperlukan!", 
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Calculate total_biaya
    BigDecimal biayaObatValue = new BigDecimal(biayaObat.getText().trim());
    BigDecimal biayaPerawatanValue = new BigDecimal(biayaPerawatan.getText().trim());
    BigDecimal totalBiaya = biayaObatValue.add(biayaPerawatanValue);

    String sql = "INSERT INTO pembayaran (kd_pembayaran, no_registrasi, " +
                 "tgl_pembayaran, jenis_pembayaran, biaya_obat, biaya_perawatan, " +
                 "total_biaya, status_pembayaran, keterangan) " +
                 "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        // Extract codes from combo box items
        String selectedRegistrasi = noRegistrasiP.getSelectedItem().toString();
        
        
        // Get just the code part (before " - ")
        String noRegistrasi = selectedRegistrasi.split(" - ")[0];
        
        
        // Set parameters
        stmt.setString(1, kdPembayaran.getText().trim());
        stmt.setString(2, noRegistrasi);
        
        stmt.setDate(3, java.sql.Date.valueOf(tanggalPembayaran.getDate()));
        stmt.setString(4, jenisPembayaran.getSelectedItem().toString());
        stmt.setBigDecimal(5, biayaObatValue);
        stmt.setBigDecimal(6, biayaPerawatanValue);
        stmt.setBigDecimal(7, totalBiaya);
        stmt.setString(8, statusPembayaran.getSelectedItem().toString());
        stmt.setString(9, keterangan.getText().trim());
        
        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Data pembayaran berhasil disimpan");
        loadData();
        clearForm();
    } catch (ArrayIndexOutOfBoundsException e) {
        JOptionPane.showMessageDialog(this, 
            "Format data combo box tidak valid. Pastikan format 'KODE - NAMA'",
            "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        if (ex.getMessage().contains("Duplicate entry")) {
            JOptionPane.showMessageDialog(this, 
                "Kode Pembayaran sudah ada. Gunakan kode yang berbeda.",
                "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, 
                "Error: " + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, 
            "Format biaya tidak valid. Harap masukkan angka yang benar.",
            "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + ex.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}
private void editData() {
    // Validate required fields
    if (kdPembayaran.getText().trim().isEmpty() || 
        noRegistrasiP.getSelectedItem() == null || 
        tanggalPembayaran.getDate() == null ||
        biayaObat.getText().trim().isEmpty() ||
        biayaPerawatan.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Harap isi semua field yang diperlukan!", 
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Calculate total_biaya
    BigDecimal biayaObatValue = new BigDecimal(biayaObat.getText().trim());
    BigDecimal biayaPerawatanValue = new BigDecimal(biayaPerawatan.getText().trim());
    BigDecimal totalBiaya = biayaObatValue.add(biayaPerawatanValue);

    String sql = "UPDATE pembayaran SET no_registrasi=?, tgl_pembayaran=?, " +
                 "jenis_pembayaran=?, biaya_obat=?, biaya_perawatan=?, " +
                 "total_biaya=?, status_pembayaran=?, keterangan=? " +
                 "WHERE kd_pembayaran=?";

    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        // Extract registration number from combo box
        String selectedRegistrasi = noRegistrasiP.getSelectedItem().toString();
        String noRegistrasi = selectedRegistrasi.split(" - ")[0];
        
        // Set parameters
        stmt.setString(1, noRegistrasi);
        stmt.setDate(2, java.sql.Date.valueOf(tanggalPembayaran.getDate()));
        stmt.setString(3, jenisPembayaran.getSelectedItem().toString());
        stmt.setBigDecimal(4, biayaObatValue);
        stmt.setBigDecimal(5, biayaPerawatanValue);
        stmt.setBigDecimal(6, totalBiaya);
        stmt.setString(7, statusPembayaran.getSelectedItem().toString());
        stmt.setString(8, keterangan.getText().trim());
        stmt.setString(9, kdPembayaran.getText().trim());

        int updatedRows = stmt.executeUpdate();
        if (updatedRows > 0) {
            JOptionPane.showMessageDialog(this, "Data pembayaran berhasil diupdate");
            loadData();
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, 
                "Data tidak ditemukan atau tidak ada perubahan", 
                "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        JOptionPane.showMessageDialog(this, 
            "Format data combo box tidak valid. Pastikan format 'KODE - NAMA'",
            "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error database: " + ex.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + ex.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}
private void hapusData() {
    int selectedRow = tblPembayaran.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(
        this,
        "Apakah Anda yakin ingin menghapus data pembayaran ini?",
        "Konfirmasi Hapus",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE
    );

    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    String kdPembayaran = tblPembayaran.getValueAt(selectedRow, 0).toString();
    String sql = "DELETE FROM pembayaran WHERE kd_pembayaran=?";

    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        stmt.setString(1, kdPembayaran);
        int rowsDeleted = stmt.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Data pembayaran berhasil dihapus");
            loadData();
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, "Data pembayaran tidak ditemukan");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}
    private void clearForm() {
        kdPembayaran.setText(generateKodePembayaran());
        
        noRegistrasiP.setSelectedIndex(0);
        tanggalPembayaran.setDate(null);
        jenisPembayaran.setSelectedIndex(0);
        biayaObat.setText("");
        biayaPerawatan.setText("");
        statusPembayaran.setSelectedIndex(0);
        keterangan.setText("");
        
        kdPembayaran.setEditable(true);
        kdPembayaran.setBackground(Color.WHITE);
        tblPembayaran.clearSelection();
    }
private void searchData() {
    String keyword = txtSearch.getText().trim();
    model.setRowCount(0);

    String sql = "SELECT p.kd_pembayaran, ps.nama_pasien, p.tgl_pembayaran, "
               + "p.jenis_pembayaran, p.biaya_obat, p.biaya_perawatan, "
               + "p.total_biaya, p.status_pembayaran, p.keterangan "
               + "FROM pembayaran p "
               + "JOIN pendaftaran pd ON p.no_registrasi = pd.no_registrasi "
               + "JOIN pasien ps ON pd.kd_pasien = ps.kd_pasien "
               + "WHERE p.kd_pembayaran LIKE ? OR "
               + "ps.nama_pasien LIKE ? OR "
               + "p.jenis_pembayaran LIKE ? OR "
               + "p.status_pembayaran LIKE ?";

    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        String searchPattern = "%" + keyword + "%";
        stmt.setString(1, searchPattern);
        stmt.setString(2, searchPattern);
        stmt.setString(3, searchPattern);
        stmt.setString(4, searchPattern);

        ResultSet rs = stmt.executeQuery();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("kd_pembayaran"),
                rs.getString("nama_pasien"),
                dateFormat.format(rs.getDate("tgl_pembayaran")),
                rs.getString("jenis_pembayaran"),
                rs.getBigDecimal("biaya_obat"),
                rs.getBigDecimal("biaya_perawatan"),
                rs.getBigDecimal("total_biaya"),
                rs.getString("status_pembayaran"),
                rs.getString("keterangan")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error saat mencari data: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}
    private String generateKodePembayaran() {
        String prefix = "PYM";
        String sql = "SELECT MAX(kd_pembayaran) AS last_code FROM pembayaran WHERE kd_pembayaran LIKE ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, prefix + "%");
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                String lastCode = rs.getString("last_code");
                if (lastCode != null) {
                    int lastNumber = Integer.parseInt(lastCode.substring(prefix.length()));
                    return prefix + String.format("%04d", lastNumber + 1);
                }
            }
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error generating payment code: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
        return prefix + "0001"; //
    }
    
    private void loadPasienDataToComboBox(JComboBox<String> comboBox) {
    comboBox.removeAllItems();
    String sql = "SELECT p.no_registrasi, ps.nama_pasien " +
                 "FROM pendaftaran p " +
                 "JOIN pasien ps ON p.kd_pasien = ps.kd_pasien";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            comboBox.addItem(rs.getString("no_registrasi") + " - " + rs.getString("nama_pasien"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading registration data: " + ex.getMessage());
    }
}
    
//    private void loadPetugasDataToComboBox(JComboBox<String> comboBox) {
//    comboBox.removeAllItems();
//    String sql = "SELECT kd_petugas, nama_petugas FROM petugas_medis WHERE profesi = 'Apoteker'";
//    
//    try (PreparedStatement stmt = conn.prepareStatement(sql);
//         ResultSet rs = stmt.executeQuery()) {
//        
//        while (rs.next()) {
//            comboBox.addItem(rs.getString("kd_petugas") + " - " + rs.getString("nama_petugas"));
//        }
//    } catch (SQLException ex) {
//        JOptionPane.showMessageDialog(this, "Error loading staff data: " + ex.getMessage());
//    }
//}
//
//    private void selectComboBoxItemByFullText(JComboBox<String> comboBox, String fullText) {
//        for (int i = 0; i < comboBox.getItemCount(); i++) {
//            if (comboBox.getItemAt(i).equals(fullText)) {
//                comboBox.setSelectedIndex(i);
//                return;
//            }
//        }
//        // If not found, try partial match
//        selectComboBoxItemByPartialText(comboBox, fullText);
//    }
//    private void selectComboBoxItemByPartialText(JComboBox<String> comboBox, String partialText) {
//        for (int i = 0; i < comboBox.getItemCount(); i++) {
//            if (comboBox.getItemAt(i).contains(partialText)) {
//                comboBox.setSelectedIndex(i);
//                return;
//            }
//        }
//        JOptionPane.showMessageDialog(this, "Item not found in combo box: " + partialText);
//    }

    private void setComboBoxValue(JComboBox<String> comboBox, String value) {
    for (int i = 0; i < comboBox.getItemCount(); i++) {
        if (comboBox.getItemAt(i).equals(value)) {
            comboBox.setSelectedIndex(i);
            return;
        }
    }
}
    private void calculateAndDisplayBiayaObat(String noRegistrasi) {
        String sql = "SELECT SUM(dr.jumlah * o.harga) AS total_biaya_obat " +
             "FROM resep r " +
             "JOIN detail_resep dr ON r.kd_resep = dr.kd_resep " +
             "JOIN obat o ON dr.kd_obat = o.kd_obat " +
             "WHERE r.no_registrasi = ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, noRegistrasi);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                BigDecimal biayaObatD = rs.getBigDecimal("total_biaya_obat");

                if (biayaObatD != null) {
                    biayaObat.setText(biayaObatD.toPlainString());  // Use biayaObatD here
                } else {
                    biayaObat.setText("0");  // Must be a String
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error calculating medicine costs: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
            biayaObat.setText("0");  // Changed from "Rp0" to "0"
        }
    }
    


}
    
