/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import config.Database;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
/**
 *
 * @author darwisy
 */
public class TrxResepObat extends javax.swing.JFrame {
    private Connection conn =new Database().connect();
    private DefaultTableModel model;
    /**
     * Creates new form DataObat
     */
    public TrxResepObat() {
        initComponents();

         loadPasienDataToComboBox(noRegistrasiP);
            loadPetugasDataToComboBox(petugas);
         initTable();
            loadData();
         clearForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResep = new javax.swing.JTable();
        btnBatal = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        kdResep = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnKembali = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        petugas = new javax.swing.JComboBox<>();
        noRegistrasiP = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        btnDetailResep = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 189, 89));

        tblResep.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblResep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResepMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblResep);

        btnBatal.setBackground(new java.awt.Color(51, 51, 51));
        btnBatal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.setText("Batal");
        btnBatal.setBorder(null);
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("KODE RESEP");

        kdResep.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kdResep.setBorder(null);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("RESEP OBAT");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("NO REGISTRASI");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("TANGGAL");

        btnKembali.setBackground(new java.awt.Color(48, 222, 135));
        btnKembali.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnKembali.setText("Kembali");
        btnKembali.setBorder(null);
        btnKembali.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnKembaliMouseClicked(evt);
            }
        });

        btnSimpan.setBackground(new java.awt.Color(48, 222, 135));
        btnSimpan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSimpan.setText("Simpan");
        btnSimpan.setBorder(null);
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(255, 255, 51));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.setBorder(null);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(255, 0, 51));
        btnHapus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHapus.setText("Hapus");
        btnHapus.setBorder(null);
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.setText(" Search...");
        txtSearch.setBorder(null);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        petugas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        petugas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        noRegistrasiP.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        noRegistrasiP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("PETUGAS APOTEK");

        btnDetailResep.setBackground(new java.awt.Color(51, 102, 255));
        btnDetailResep.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDetailResep.setForeground(new java.awt.Color(255, 255, 255));
        btnDetailResep.setText("Detail Resep Obat");
        btnDetailResep.setBorder(null);
        btnDetailResep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailResepActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(364, 364, 364)
                .addComponent(jLabel2)
                .addContainerGap(484, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)))
                            .addComponent(btnDetailResep, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(petugas, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(kdResep, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                                        .addComponent(noRegistrasiP, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSearch))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(115, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(kdResep, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(btnKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(79, 79, 79)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(noRegistrasiP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(petugas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDetailResep, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        simpanData();
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        clearForm();
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editData();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        hapusData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void tblResepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResepMouseClicked
        
     int row = tblResep.getSelectedRow();
    
    if (row >= 0) {
        // Get the selected values from table
        String kodeResep = tblResep.getValueAt(row, 0).toString();
        String noRegistrasi = tblResep.getValueAt(row, 1).toString();
        String namaPasien = tblResep.getValueAt(row, 2).toString();
        String namaPetugas = tblResep.getValueAt(row, 3).toString();
        String tglResep = tblResep.getValueAt(row, 4).toString();

        // Fill the form fields
        kdResep.setText(kodeResep);
        
        // Set the date
        try {
            SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
            java.util.Date date = format.parse(tglResep);
            datePicker1.setDate(date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Error parsing date: " + ex.getMessage());
        }

        // Find and select matching items in combo boxes
        selectComboBoxItemByFullText(noRegistrasiP, noRegistrasi + " - " + namaPasien);
        selectComboBoxItemByPartialText(petugas, namaPetugas);

        // Make kd_resep non-editable when editing
        kdResep.setEditable(false);
        kdResep.setBackground(Color.LIGHT_GRAY);
        }
    }//GEN-LAST:event_tblResepMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        searchData();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnKembaliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnKembaliMouseClicked
        this.dispose();
        new Menu().setVisible(true);
    }//GEN-LAST:event_btnKembaliMouseClicked

    private void btnDetailResepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailResepActionPerformed
                    this.dispose();

        int row = tblResep.getSelectedRow();
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "Pilih resep terlebih dahulu");
                return;
            }
            String kodeResep = tblResep.getValueAt(row, 0).toString();

            // Pass the kodeResep to the detail form
            TrxResepObatDetail detailForm = new TrxResepObatDetail(kodeResep);
            detailForm.setVisible(true);
    }//GEN-LAST:event_btnDetailResepActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrxResepObat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrxResepObat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrxResepObat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrxResepObat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrxResepObat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnDetailResep;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField kdResep;
    private javax.swing.JComboBox<String> noRegistrasiP;
    private javax.swing.JComboBox<String> petugas;
    private javax.swing.JTable tblResep;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
        model = new DefaultTableModel();
        model.addColumn("Kode Resep");
        model.addColumn("No Registrasi");
        model.addColumn("Nama Pasien");
        model.addColumn("Nama Petugas");
        model.addColumn("Tanggal Resep");
        tblResep.setModel(model);
    }
    
    private void loadData() {
        model.setRowCount(0);
        String sql = "SELECT r.kd_resep, r.no_registrasi, ps.nama_pasien, "
                   + "pm.nama_petugas, r.tgl_resep "
                   + "FROM resep r "
                   + "JOIN pendaftaran p ON r.no_registrasi = p.no_registrasi "
                   + "JOIN pasien ps ON p.kd_pasien = ps.kd_pasien "
                   + "JOIN petugas_medis pm ON r.kd_petugas = pm.kd_petugas";

        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("kd_resep"),
                    rs.getString("no_registrasi"),
                    rs.getString("nama_pasien"),
                    rs.getString("nama_petugas"),
                    dateFormat.format(rs.getDate("tgl_resep"))
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }
    
    private void simpanData() {
    // Validate required fields
    if (kdResep.getText().trim().isEmpty() || 
        noRegistrasiP.getSelectedItem() == null || 
        petugas.getSelectedItem() == null || 
        datePicker1.getDate() == null) {
        JOptionPane.showMessageDialog(this, "Harap isi semua field yang diperlukan!", 
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String sql = "INSERT INTO resep (kd_resep, no_registrasi, kd_petugas, tgl_resep) VALUES (?, ?, ?, ?)";

    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        // Extract codes from combo box items
        String selectedRegistrasi = noRegistrasiP.getSelectedItem().toString();
        String selectedPetugas = petugas.getSelectedItem().toString();
        
        // Get just the code part (before " - ")
        String noRegistrasi = selectedRegistrasi.split(" - ")[0];
        String kodePetugas = selectedPetugas.split(" - ")[0];
        
        // Set parameters
        stmt.setString(1, kdResep.getText().trim());
        stmt.setString(2, noRegistrasi);
        stmt.setString(3, kodePetugas);
        stmt.setDate(4, java.sql.Date.valueOf(datePicker1.getDate()));
        
        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Data resep obat berhasil disimpan");
        loadData();
        clearForm();
    } catch (ArrayIndexOutOfBoundsException e) {
        JOptionPane.showMessageDialog(this, 
            "Format data combo box tidak valid. Pastikan format 'KODE - NAMA'",
            "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        if (ex.getMessage().contains("Duplicate entry")) {
            JOptionPane.showMessageDialog(this, 
                "Kode Resep sudah ada. Gunakan kode yang berbeda.",
                "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, 
                "Error: " + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + ex.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}
   private void editData() {
    // Validate required fields
    if (kdResep.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Kode Resep harus diisi", 
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    if (noRegistrasiP.getSelectedItem() == null || petugas.getSelectedItem() == null || datePicker1.getDate() == null) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", 
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String sql = "UPDATE resep SET no_registrasi=?, kd_petugas=?, tgl_resep=? WHERE kd_resep=?";

    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
        // Extract registration number (format: "no_registrasi - nama_pasien")
        String selectedRegistrasi = noRegistrasiP.getSelectedItem().toString();
        String noRegistrasi = selectedRegistrasi.split(" - ")[0];
        
        // Extract petugas code (format: "kd_petugas - nama_petugas")
        String selectedPetugas = petugas.getSelectedItem().toString();
        String kodePetugas = selectedPetugas.split(" - ")[0];
        
        // Set parameters
        stmt.setString(1, noRegistrasi);
        stmt.setString(2, kodePetugas);
        stmt.setDate(3, java.sql.Date.valueOf(datePicker1.getDate()));
        stmt.setString(4, kdResep.getText().trim());

        int updatedRows = stmt.executeUpdate();
        if (updatedRows > 0) {
            JOptionPane.showMessageDialog(this, "Data resep obat berhasil diupdate");
            loadData();
            clearForm();
        } else {
            JOptionPane.showMessageDialog(this, 
                "Data tidak ditemukan atau tidak ada perubahan", 
                "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        JOptionPane.showMessageDialog(this, 
            "Format data combo box tidak valid. Pastikan format 'KODE - NAMA'",
            "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error database: " + ex.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + ex.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void hapusData() {
        int selectedRow = tblResep.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Apakah Anda yakin ingin menghapus data resep ini?",
            "Konfirmasi Hapus",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        String kdResep = tblResep.getValueAt(selectedRow, 0).toString();
        String sql = "DELETE FROM resep WHERE kd_resep=?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, kdResep);
            int rowsDeleted = stmt.executeUpdate();

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Data resep berhasil dihapus");
                loadData();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Data resep tidak ditemukan");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearForm() {
        kdResep.setText(generateKodeResep());
        petugas.setSelectedIndex(0);
        noRegistrasiP.setSelectedIndex(0);
        datePicker1.setDate(null);
        
        kdResep.setEditable(true);
        kdResep.setBackground(Color.WHITE);
        tblResep.clearSelection();
    }
    
    private void searchData() {
        String keyword = txtSearch.getText().trim();
        model.setRowCount(0);

        String sql = "SELECT r.kd_resep, r.no_registrasi, ps.nama_pasien, "
                   + "pm.nama_petugas, r.tgl_resep "
                   + "FROM resep r "
                   + "JOIN pendaftaran p ON r.no_registrasi = p.no_registrasi "
                   + "JOIN pasien ps ON p.kd_pasien = ps.kd_pasien "
                   + "JOIN petugas_medis pm ON r.kd_petugas = pm.kd_petugas "
                   + "WHERE r.kd_resep LIKE ? OR "
                   + "r.no_registrasi LIKE ? OR "
                   + "ps.nama_pasien LIKE ? OR "
                   + "pm.nama_petugas LIKE ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            String searchPattern = "%" + keyword + "%";
            stmt.setString(1, searchPattern);
            stmt.setString(2, searchPattern);
            stmt.setString(3, searchPattern);
            stmt.setString(4, searchPattern);

            ResultSet rs = stmt.executeQuery();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("kd_resep"),
                    rs.getString("no_registrasi"),
                    rs.getString("nama_pasien"),
                    rs.getString("nama_petugas"),
                    dateFormat.format(rs.getDate("tgl_resep"))
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error saat mencari data: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String generateKodeResep() {
        String prefix = "RCP";
        String sql = "SELECT MAX(kd_resep) AS last_code FROM resep WHERE kd_resep LIKE ?";

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, prefix + "%");
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                String lastCode = rs.getString("last_code");
                if (lastCode != null) {
                    int lastNumber = Integer.parseInt(lastCode.substring(prefix.length()));
                    return prefix + String.format("%04d", lastNumber + 1);
                }
            }
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error generating code: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
        return prefix + "0001";
    }
    
    private void loadPasienDataToComboBox(JComboBox<String> comboBox) {
    comboBox.removeAllItems();
    String sql = "SELECT p.no_registrasi, ps.nama_pasien " +
                 "FROM pendaftaran p " +
                 "JOIN pasien ps ON p.kd_pasien = ps.kd_pasien";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            comboBox.addItem(rs.getString("no_registrasi") + " - " + rs.getString("nama_pasien"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading registration data: " + ex.getMessage());
    }
}
    private void loadPetugasDataToComboBox(JComboBox<String> comboBox) {
    comboBox.removeAllItems();
    String sql = "SELECT kd_petugas, nama_petugas FROM petugas_medis WHERE profesi = 'Apoteker'";
    
    try (PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            comboBox.addItem(rs.getString("kd_petugas") + " - " + rs.getString("nama_petugas"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading staff data: " + ex.getMessage());
    }
}

    private void selectComboBoxItemByFullText(JComboBox<String> comboBox, String fullText) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            if (comboBox.getItemAt(i).equals(fullText)) {
                comboBox.setSelectedIndex(i);
                return;
            }
        }
        // If not found, try partial match
        selectComboBoxItemByPartialText(comboBox, fullText);
    }
    private void selectComboBoxItemByPartialText(JComboBox<String> comboBox, String partialText) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            if (comboBox.getItemAt(i).contains(partialText)) {
                comboBox.setSelectedIndex(i);
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Item not found in combo box: " + partialText);
    }


}
    
